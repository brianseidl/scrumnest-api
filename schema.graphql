type Mutation {
  createNest(
    name: String!
  ): Nest

  addNestUser(
    nestId: ID!,
    email: String!
  ): Nest

  removeNestUser(
    nestId: ID!,
    email: String!
  ): Nest

  createStory(
    nestId: ID!,
    title: String!,
    description: String,
    owner: String,
    status: Status
    sprint: Int
  ): Nest  # return Nest here because it is simpler for the UI to re-render the whole Nest

  addStoryAttachment(
    nestId: ID!,
    storyId: ID!,
    name: String!,
    key: String!
  ): Story  # return Story here instead of nest because attactments don't show on nest view

  deleteStoryAttachment(
    nestId: ID!,
    storyId: ID!,
    key: String!,
  ): Story

  addComment(
    nestId: ID!,
    storyId: ID!,
    comment: String!
  ): Story

  updateStory(
    nestId: ID!,
    storyId: ID!,
    status: Status!,
    description: String,
    comment: String,  # String conent of the message. Username will be determined by user making call
    priority: Priority,
    effort: Int,
    owner: String,  # username string
    dateToBeCompleted: String,
    sprint: Int
  ): Nest  # return Nest here because it is simpler for the UI to re-render the whole Nest

  deleteStory(
    nestId: ID!,
    storyId: ID!
  ): Nest  # return Nest here because it is simpler for the UI to re-render the whole Nest

  addSprint(
    nestId: ID!,
  ): Nest
}

type Query {
  nest(nestId: ID!, sprint: Int): Nest
  nests: [Nest]
  story(nestId: ID!, storyId: ID!): Story
  stories(nestId: ID!, sprint: Int): [Story]
  users(prefix: String, username: String): [User]  # optional username prefix and username param
}

type Subscription {
  nestStories(nestId: ID!): Nest
    @aws_subscribe(mutations: ["createStory", "updateStory", "deleteStory"])
}

type Nest {
  nestId: ID!
  name: String!
  createdAt: String!
  owner: String!
  stories: [Story]!
  users: [User]!
  sprints: Int!
}

type Story {
  nestId: ID!
  storyId: ID!
  title: String!
  description: String
  createdAt: String!
  dateToBeCompleted: String
  owner: String
  status: Status!
  attachments: [FileObject]!
  comments: [Comment]!
  priority: Priority
  effort: Int
  sprint: Int
}

type FileObject {
  name: String!
  key: String!
  createdAt: String!
}

type User {
  username: String
  email: String!
}

type Comment {
  username: String!
  content: String!
  createdAt: String!
}

enum Priority {
  NONE
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum Status {
  TODO
  DEV
  QA
  COMPLETED
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
